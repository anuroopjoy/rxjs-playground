import {
  demoAjax,
  demoBindCallback,
  demoBindNodeCallback,
  demoDefer,
  demoFrom,
  demoFromEvent,
  demoFromEventPattern,
  demoGenerate,
  demoInterval,
  demoOf,
  demoRange,
  demoThrowError,
  demoTimer,
  demoIif,
} from './creation.constants';
import { demoElementAt, demoFilter, demoFirst, demoIgnoreElements, demoLast, demoSingle } from './filtering.constants';
import {
  demoCombineLatest,
  demoConcat,
  demoForkJoin,
  demoMerge,
  demoPartition,
  demoRace,
  demoZip,
} from './join-creation.constants';
import {
  demoBuffer,
  demoBufferCount,
  demoBufferTime,
  demoBufferToggle,
  demoBufferWhen,
  demoConcatMap,
  demoMergeMap,
  demoSwitchMap,
  demoExhaustMap,
  demoMap,
  demoExpand,
  demoGroupBy,
  demoPairwise,
  demoScan,
  demoMergeScan,
  demoSwitchScan,
  demoWindow,
  demoWindowCount,
  demoWindowTime,
  demoWindowToggle,
  demoWindowWhen,
} from './transformation.constants';

export const operatorMap: Map<string, Function> = new Map([
  ['ajax', demoAjax],
  ['bindCallback', demoBindCallback],
  ['bindNodeCallback', demoBindNodeCallback],
  ['defer', demoDefer],
  ['from', demoFrom],
  ['fromEvent', demoFromEvent],
  ['fromEventPattern', demoFromEventPattern],
  ['generate', demoGenerate],
  ['interval', demoInterval],
  ['of', demoOf],
  ['range', demoRange],
  ['throwError', demoThrowError],
  ['timer', demoTimer],
  ['iif', demoIif],
  ['combineLatest', demoCombineLatest],
  ['concat', demoConcat],
  ['forkJoin', demoForkJoin],
  ['merge', demoMerge],
  ['partition', demoPartition],
  ['race', demoRace],
  ['zip', demoZip],
  ['buffer', demoBuffer],
  ['bufferCount', demoBufferCount],
  ['bufferTime', demoBufferTime],
  ['bufferToggle', demoBufferToggle],
  ['bufferWhen', demoBufferWhen],
  ['concatMap', demoConcatMap],
  ['mergeMap', demoMergeMap],
  ['switchMap', demoSwitchMap],
  ['exhaustMap', demoExhaustMap],
  ['map', demoMap],
  ['expand', demoExpand],
  ['groupBy', demoGroupBy],
  ['pairwise', demoPairwise],
  ['scan', demoScan],
  ['mergeScan', demoMergeScan],
  ['switchScan', demoSwitchScan],
  ['window', demoWindow],
  ['windowCount', demoWindowCount],
  ['windowTime', demoWindowTime],
  ['windowToggle', demoWindowToggle],
  ['windowWhen', demoWindowWhen],
  ['filter', demoFilter],
  ['elementAt', demoElementAt],
  ['first', demoFirst],
  ['last', demoLast],
  ['single', demoSingle],
  ['ignoreElements', demoIgnoreElements],
]);
